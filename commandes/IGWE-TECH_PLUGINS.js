//base by igwetech 







const { zokou } = require("../framework/zokou");

const axios = require("axios");

const fs = require("fs");

const path = require("path");

// Commande de Calculatrice

zokou({ 

  nomCom: "calc",

  categorie: "IGWE-PLGNS",

  reaction: "üßÆ",

  desc: "Effectue des calculs math√©matiques simples.",

  alias: ["calcul"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez entrer une expression math√©matique." });

  }

  const expression = arg.join(" ");

  try {

    const result = eval(expression);

    zk.sendMessage(origineMessage, { text: `Le r√©sultat de ${expression} est ${result}.` });

  } catch (error) {

    zk.sendMessage(origineMessage, { text: "`D√©sol√©, je n'ai pas pu calculer cette expression.`" });

  }

});

// Commande de Dictionnaire

zokou({ 

  nomCom: "def",

  categorie: "IGWE-PLGNS",

  reaction: "üìñ",

  desc: "Donne la d√©finition d'un mot.",

  alias: ["definition"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez sp√©cifier un mot." });

  }

  const mot = arg[0];

  const url = `https://api.dictionaryapi.dev/api/v2/entries/fr/${mot}`;

  try {

    const response = await axios.get(url);

    const data = response.data[0];

    const definition = data.meanings[0].definitions[0].definition;

    zk.sendMessage(origineMessage, { text: `D√©finition de ${mot}: ${definition}` });

  } catch (error) {

    zk.sendMessage(origineMessage, { text: "D√©sol√©, je n'ai pas pu trouver la d√©finition de ce mot." });

  }

});

// Commande de G√©n√©ration de Noms

zokou({ 

  nomCom: "namegen",

  categorie: "IGWE-PLGNS",

  reaction: "üë§",

  desc: "G√©n√®re des noms al√©atoires pour des personnages de jeux ou de romans.",

  alias: ["genname"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  const firstNames = ["Liora", "Thorne", "Elysia", "Kael", "Seraphine", "Rylan", "Aurelia", "Caspian", "Isolde", "Orion"];

  const lastNames = ["Smith", "Johnson", "Brown", "Taylor", "Miller", "Wilson", "Moore", "Anderson", "Thomas", "Jackson"];

  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];

  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];

  zk.sendMessage(origineMessage, { text: `Nom g√©n√©r√©: ${randomFirstName} ${randomLastName}` });

});

// Commande Echo

zokou({ 

  nomCom: "echo",

  categorie: "IGWE-PLGNS",

  reaction: "üîä",

  desc: "R√©p√®te un texte un certain nombre de fois.",

  alias: ["repeat"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0] || !arg[1]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez sp√©cifier un nombre et un texte." });

  }

  const count = parseInt(arg[0]);

  const text = arg.slice(1).join(" ");

  if (isNaN(count) || count <= 0) {

    return zk.sendMessage(origineMessage, { text: "Veuillez entrer un nombre valide." });

  }

  let responseText = "";

  for (let i = 0; i < count; i++) {

    responseText += `${text}\n`;

  }

  zk.sendMessage(origineMessage, { text: responseText });

});

// Commande de G√©n√©ration de CV

zokou({ 

  nomCom: "gencv",

  categorie: "IGWE-PLGNS",

  reaction: "üìÑ",

  desc: "G√©n√®re un CV bas√© sur les informations fournies par l'utilisateur.",

  alias: ["genresume"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez fournir vos informations (nom, exp√©rience, comp√©tences)." });

  }

  const info = arg.join(" ");

  const cv = `CV de ${nomAuteurMessage}\n\nInformations:\n${info}\n\nExp√©rience:\n- D√©veloppeur Web chez XYZ Corp (2018-2020)\n- Consultant en technologie chez ABC Inc (2020-2022)\n\nComp√©tences:\n- JavaScript, Python, Java\n- HTML, CSS, React\n- Gestion de projet, Communication\n\nFormation:\n- Licence en Informatique, Universit√© de XYZ (2015-2018)\n- Master en Gestion de Projets, Universit√© de ABC (2018-2020)`;

  zk.sendMessage(origineMessage, { text: cv });

});

// Commande de G√©n√©ration de Noms d'Entreprise

zokou({ 

  nomCom: "genbusiness_name",

  categorie: "IGWE-PLGNS",

  reaction: "üè¢",

  desc: "G√©n√®re des noms d'entreprise al√©atoires en demandant la cat√©gorie.",

  alias: ["genbizname"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez sp√©cifier une cat√©gorie (tech, finance, marketing, etc.)." });

  }

  const category = arg[0].toLowerCase();

  const businessNames = {

    tech: ["Innovate", "Tech", "Solutions", "NextGen", "Prime", "Elite", "Alpha"],

    finance: ["Capital", "Finance", "Invest", "Wealth", "Money", "Bank", "Fund"],

    marketing: ["Brand", "Marketing", "Promo", "Advertise", "Media", "Campaign", "Market"],

    health: ["Health", "Care", "Wellness", "Life", "Med", "Clinic", "Healthcare"]

  };

  if (!businessNames[category]) {

    return zk.sendMessage(origineMessage, { text: "Cat√©gorie non reconnue. Veuillez choisir parmi tech, finance, marketing, health." });

  }

  const randomBusinessName = businessNames[category][Math.floor(Math.random() * businessNames[category].length)];

  zk.sendMessage(origineMessage, { text: `Nom d'entreprise g√©n√©r√©: ${randomBusinessName} ${category.charAt(0).toUpperCase() + category.slice(1)}` });

});

// Commande de M√©t√©o

zokou({ 

  nomCom: "meteo",

  categorie: "IGWE-PLGNS",

  reaction: "üå§Ô∏è",

  desc: "Donne la m√©t√©o actuelle pour une ville.",

  alias: ["weather"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez sp√©cifier une ville." });

  }

  const ville = arg[0];

  const url = `https://api.open-meteo.com/v1/forecast?latitude=${ville.latitude}&longitude=${ville.longitude}&current_weather=true&timezone=auto`;

  try {

    const response = await axios.get(url);

    const data = response.data;

    const temperature = data.current_weather.temperature;

    const windSpeed = data.current_weather.windspeed;

    const weatherCode = data.current_weather.weathercode;

    const weatherDescription = getWeatherDescription(weatherCode);

    const weatherInfo = `M√©t√©o √† ${ville}:\nTemp√©rature: ${temperature}¬∞C\nVitesse du vent: ${windSpeed} m/s\nDescription: ${weatherDescription}`;

    zk.sendMessage(origineMessage, { text: weatherInfo });

  } catch (error) {

    zk.sendMessage(origineMessage, { text: "D√©sol√©, je n'ai pas pu r√©cup√©rer la m√©t√©o pour cette ville." });

  }

});



function getWeatherDescription(weatherCode) {

  const weatherDescriptions = {

    0: "Ciel d√©gag√©",

    1: "Principalement clair",

    2: "Partiellement nuageux",

    3: "Couvert",

    45: "Brouillard",

    48: "Brouillard givrant",

    51: "Bruine l√©g√®re",

    53: "Bruine mod√©r√©e",

    55: "Bruine dense",

    56: "Bruine vergla√ßante l√©g√®re",

    57: "Bruine vergla√ßante dense",

    61: "Pluie l√©g√®re",

    63: "Pluie mod√©r√©e",

    65: "Pluie forte",

    66: "Pluie vergla√ßante l√©g√®re",

    67: "Pluie vergla√ßante forte",

    71: "Chute de neige l√©g√®re",

    73: "Chute de neige mod√©r√©e",

    75: "Chute de neige forte",

    77: "Grains de neige",

    80: "Averses de pluie l√©g√®res",

    81: "Averses de pluie mod√©r√©es",

    82: "Averses de pluie violentes",

    85: "Averses de neige l√©g√®res",

    86: "Averses de neige fortes",

    95: "Orage l√©ger ou mod√©r√©",

    96: "Orage avec gr√™le l√©g√®re",

    99: "Orage avec gr√™le forte"

  };

  return weatherDescriptions[weatherCode] || "Conditions m√©t√©orologiques inconnues";

}

// Commande de G√©n√©ration de Messages d'Amour

zokou({ 

  nomCom: "love_msg",

  categorie: "IGWE-PLGNS",

  reaction: "‚ù§Ô∏è",

  desc: "G√©n√®re des messages d'amour (demande si c'est pour une fille ou un gar√ßon).",

  alias: ["lovemsg"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  if (!arg[0]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez sp√©cifier si c'est pour une fille ou un gar√ßon." });

  }

  const gender = arg[0].toLowerCase();

  const loveMessages = {

    fille: [

      "Tu es la lumi√®re de ma vie.",

      "Tu es mon plus grand bonheur.",

      "Je t'aime plus que tout au monde.",

      "Tu es mon √©toile filante.",

      "Tu es ma raison de vivre.",

      "Tu es mon c≈ìur et mon √¢me.",

      "Tu es mon r√™ve le plus cher.",

      "Tu es ma plus belle d√©couverte.",

      "Tu es mon tr√©sor le plus pr√©cieux.",

      "Tu es ma plus belle aventure.",

      "Tu es mon ange gardien.",

      "Tu es ma source d'inspiration.",

      "Tu es mon refuge.",

      "Tu es mon soutien.",

      "Tu es mon protecteur.",

      "Tu es mon guide.",

      "Tu es mon courage.",

      "Tu es mon force.",

      "Tu es mon inspiration.",

      "Tu es mon plus grand amour."

    ],

    gar√ßon: [

      "Tu es mon igwe.",

      "Tu es mon rocher.",

      "Je t'aime plus que les mots ne peuvent dire.",

      "Tu es mon soutien.",

      "Tu es mon protecteur.",

      "Tu es mon guide.",

      "Tu es mon courage.",

      "Tu es mon force.",

      "Tu es mon inspiration.",

      "Tu es mon plus grand amour.",

      "Tu es mon ange gardien.",

      "Tu es ma source d'inspiration.",

      "Tu es mon refuge.",

      "Tu es ma raison de vivre.",

      "Tu es mon c≈ìur et mon √¢me.",

      "Tu es mon r√™ve le plus cher.",

      "Tu es ma plus belle d√©couverte.",

      "Tu es mon tr√©sor le plus pr√©cieux.",

      "Tu es ma plus belle aventure.",

      "Tu es mon √©toile filante."

    ]

  };

  if (!loveMessages[gender]) {

    return zk.sendMessage(origineMessage, { text: "Veuillez sp√©cifier 'fille' ou 'gar√ßon'." });

  }

  const randomLoveMessage = loveMessages[gender][Math.floor(Math.random() * loveMessages[gender].length)];

  zk.sendMessage(origineMessage, { text: randomLoveMessage });

});

// je m‚Äôattribue une commandeüôÇ

zokou({ 

  nomCom: "igwe-tech",

  categorie: "IGWE-PLGNS",

  reaction: "üí´",

  desc: "Affiche les informations sur l'auteur des commandes.",

  alias: ["it"]

}, async (origineMessage, zk, commandeOptions) => {

  const { ms, msgRepondu, arg, repondre, nomAuteurMessage } = commandeOptions;

  const info = `Je cr√©e moi mm mes plugins si vous voulez me contacter ecrivez via WhatsApp : https://wa.me/24105730123`;

  zk.sendMessage(origineMessage, { text: info });

});
